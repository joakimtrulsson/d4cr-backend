// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String    @id @default(uuid()) @postgresql.Uuid
  fullName            String    @default("")
  email               String    @unique @default("")
  password            String
  chapters            Chapter[] @relation("Chapter_contentOwner")
  role                Role?     @relation("User_role", fields: [roleId], references: [id])
  roleId              String?   @map("role") @postgresql.Uuid
  magicAuthToken      String?
  magicAuthIssuedAt   DateTime?
  magicAuthRedeemedAt DateTime?

  @@index([roleId])
}

model Role {
  id                String  @id @default(uuid()) @postgresql.Uuid
  name              String  @default("")
  canCreateItems    Boolean @default(false)
  canCreateChapters Boolean @default(false)
  canManageAllItems Boolean @default(false)
  canSeeOtherUsers  Boolean @default(false)
  canEditOtherUsers Boolean @default(false)
  canManageUsers    Boolean @default(false)
  canManageRoles    Boolean @default(false)
  assignedTo        User[]  @relation("User_role")
}

model Chapter {
  id                              String    @id @default(uuid()) @postgresql.Uuid
  title                           String    @default("")
  slug                            String    @unique @default("")
  preamble                        Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  heroImage                       Json?
  chapterLanguage                 String?   @default("EN-GB")
  translatedChapters              Chapter[] @relation("Chapter_translatedChapters")
  status                          String    @default("draft")
  sections                        Json?
  contentOwner                    User[]    @relation("Chapter_contentOwner")
  from_Chapter_translatedChapters Chapter[] @relation("Chapter_translatedChapters")
  from_News_relatedChapters       News[]    @relation("News_relatedChapters")
}

model Page {
  id                  String @id @default(uuid()) @postgresql.Uuid
  title               String @default("")
  slug                String @unique @default("")
  heroPreamble        Json   @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  ctaOneAnchorText    String @default("")
  ctaOneUrl           Json?
  ctaTwoUrlAnchorText String @default("")
  ctaTwoUrl           Json?
  status              String @default("draft")
  sections            Json?
}

model FrontPage {
  id                  Int    @id
  heroTitle           String @default("")
  heroPreamble        Json   @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  heroVideo           Json?
  ctaOneAnchorText    String @default("")
  ctaOneUrl           Json?
  ctaTwoUrlAnchorText String @default("")
  ctaTwoUrl           Json?
  sections            Json?
}

model FooterBanner {
  id       Int    @id
  title    String @default("")
  preamble Json   @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
}

model FormEmail {
  id              Int    @id
  contactEmail    String @default("")
  shareStoryEmail String @default("")
  joinSlackEmail  String @default("")
}

model FooterJoinUs {
  id    Int    @id
  url1  String @default("")
  icon1 Json?
  url2  String @default("")
  icon2 Json?
  url3  String @default("")
  icon3 Json?
  url4  String @default("")
  icon4 Json?
}

model MainMenu {
  id            Int    @id
  navigation    Json?
  ctaAnchorText String @default("")
  ctaUrl        Json?
}

model FooterMenu {
  id         Int   @id
  navigation Json?
}

model News {
  id                String        @id @default(uuid()) @postgresql.Uuid
  title             String        @unique @default("")
  slug              String        @unique @default("")
  newsCategory      NewsCategory? @relation("News_newsCategory", fields: [newsCategoryId], references: [id])
  newsCategoryId    String?       @map("newsCategory") @postgresql.Uuid
  relatedChapters   Chapter[]     @relation("News_relatedChapters")
  image             Json?
  sections          Json?
  resourcesTitle    String        @default("")
  resourcesPreamble String        @default("")
  resources         Resource[]    @relation("News_resources")
  createdAt         DateTime?     @default(now())
  status            String        @default("draft")

  @@index([newsCategoryId])
}

model NewsCategory {
  id            String    @id @default(uuid()) @postgresql.Uuid
  categoryTitle String    @unique @default("")
  createdAt     DateTime? @default(now())
  relatedNews   News[]    @relation("News_newsCategory")
}

model Resource {
  id                       String        @id @default(uuid()) @postgresql.Uuid
  title                    String        @unique @default("")
  url                      String        @default("")
  image                    Json?
  resourceType             ResourceType? @relation("Resource_resourceType", fields: [resourceTypeId], references: [id])
  resourceTypeId           String?       @map("resourceType") @postgresql.Uuid
  createdAt                DateTime?     @default(now())
  from_News_resources      News[]        @relation("News_resources")
  from_Principle_resources Principle[]   @relation("Principle_resources")
  from_Case_resources      Case[]        @relation("Case_resources")

  @@index([resourceTypeId])
}

model ResourceType {
  id        String     @id @default(uuid()) @postgresql.Uuid
  type      String     @default("")
  icon      Json?
  resources Resource[] @relation("Resource_resourceType")
}

model Image {
  id             String    @id @default(uuid()) @postgresql.Uuid
  title          String    @default("")
  altText        String    @default("")
  file_filesize  Int?
  file_extension String?
  file_width     Int?
  file_height    Int?
  file_id        String?
  createdAt      DateTime? @default(now())
  size           Int?
  url            String    @default("")
}

model Video {
  id            String    @id @default(uuid()) @postgresql.Uuid
  title         String    @default("")
  altText       String    @default("")
  file_filesize Int?
  file_filename String?
  createdAt     DateTime? @default(now())
  size          Int?
  thumbnailUrl  String    @default("")
  url           String    @default("")
}

model Principle {
  id                  String             @id @default(uuid()) @postgresql.Uuid
  title               String             @default("")
  slug                String             @unique @default("")
  subHeader           String             @default("")
  quote               String             @default("")
  quoteAuthor         String             @default("")
  image               Json?
  subPrinciples       Json?
  resourcesTitle      String             @default("")
  resourcesPreamble   String             @default("")
  resources           Resource[]         @relation("Principle_resources")
  principleCategory   PrincipleCategory? @relation("Principle_principleCategory", fields: [principleCategoryId], references: [id])
  principleCategoryId String?            @map("principleCategory") @postgresql.Uuid
  principleNumber     PrincipleNumber?   @relation("Principle_principleNumber", fields: [principleNumberId], references: [id])
  principleNumberId   String?            @unique @map("principleNumber") @postgresql.Uuid
  status              String             @default("draft")

  @@index([principleCategoryId])
}

model PrincipleNumber {
  id         String     @id @default(uuid()) @postgresql.Uuid
  number     Int        @unique
  principles Principle? @relation("Principle_principleNumber")
}

model PrincipleCategory {
  id         String      @id @default(uuid()) @postgresql.Uuid
  title      String      @unique @default("")
  createdAt  DateTime?   @default(now())
  principles Principle[] @relation("Principle_principleCategory")
}

model People {
  id               String    @id @default(uuid()) @postgresql.Uuid
  fullName         String    @default("")
  role             String    @default("")
  city             String    @default("")
  country          String    @default("")
  image            Json?
  socialMediaUrl1  String    @default("")
  socialMediaIcon1 Json?
  socialMediaUrl2  String    @default("")
  socialMediaIcon2 Json?
  createdAt        DateTime? @default(now())
}

model Case {
  id                String     @id @default(uuid()) @postgresql.Uuid
  title             String     @default("")
  linkType          String?    @default("internal")
  url               String     @default("")
  preamble          Json       @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  caseImage         Json?
  quote             String     @default("")
  sections          Json?
  resourcesTitle    String     @default("")
  resourcesPreamble String     @default("")
  resources         Resource[] @relation("Case_resources")
  status            String     @default("draft")
  createdAt         DateTime?  @default(now())
}

model Test {
  id       String @id @default(uuid()) @postgresql.Uuid
  sections Json?
}
